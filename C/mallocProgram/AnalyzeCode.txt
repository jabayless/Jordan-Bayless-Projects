//prototype functions
//returns the number of iterations of the program to run
int get_iteration_count(int rand);

//function called once per iteration to generate an array size between 100 and 799
int get_arr_size(int rand);

//generate a random number to fill the array
int get_arr_val(int rand);

float get_running__ratio();

int isPerfectSquare(int number);

float get_running_ratio(){
    //generate a random number to be the number of iterations the program will run
    int randomNumber = rand();
    int randomIterationCount = get_iteration_count(randomNumber);

    int k = 0;
    double sum = 0.0;
    double average = 0.0;
    for(k=0; k < randomIterationCount; k++){

    //generate a random number that will be used as the size of the array
    int randArraySize = get_arr_size(rand());
    //build the array of that size
    int *p = (int*)malloc(sizeof(int)*randArraySize);

    //fill the array with random numbers
    int i ;
    for(i = 0 ; i < randArraySize; i++){
       // buff[i] = get_arr_val(rand());
       p[i] = get_arr_val(rand());
      // printf("p[%d] = %d\n", i, p[i]);
    }
    //for debugging, print the array
    int j;
    int perfectSquareCount = 0;
    int notPerfectSquareCount = 0;
    for(j=0; j < (randArraySize); j++){
        if(isPerfectSquare(p[j])){
        perfectSquareCount++;
        }
    else{
        notPerfectSquareCount++;
    }

    }

    //determine the number of numbers that are perfect squares
    float perfectSquareRatio = ((double)perfectSquareCount / (double)notPerfectSquareCount);

    //compute the average
    sum = sum + perfectSquareRatio;
    }

    average = (sum / randomIterationCount);
    return average;

}

//Functions specified in design implementation
int get_iteration_count(int rand){
    int high = 499;
    int low = 100;
    return (rand % ((high - low + 1) + low));
}

int get_arr_size(int rand){
    int high = 799;
    int low = 100;
    return (rand % ((high - low + 1) + low));
}

int get_arr_val(int rand){
    int high = 999;
    int low = 1;
    return (rand % ((high - low + 1) + low));
}

/*function definition*/
int isPerfectSquare(int number){
    int iVar;
    float fVar;
    double myNumber = (double)number;
    fVar=sqrt(myNumber);
    iVar=fVar;

    if(iVar==fVar)
        return 1;
    else
        return 0;
}
